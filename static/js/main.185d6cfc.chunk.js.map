{"version":3,"sources":["firebase.js","Header.js","Tableau.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SetHeader","className","role","aria-label","Tableau","Component","Main","handleChange","event","setState","target","name","value","setSubmitButton","preventDefault","console","log","state","entryDate","entryTitle","entryComment","action","htmlFor","onChange","this","type","placeholder","id","rows","cols","maxLength","onClick","SetFooter","href","rel","App","Header","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAcAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKIR,EAAf,EAAeA,ICLAS,EATG,WACd,OACA,4BAAQC,UAAU,WACd,0CACA,+GAA+E,0BAAMC,KAAK,MAAOC,aAAW,iBAA7B,WAA/E,c,QCGOC,E,uKALP,OACI,kD,GAHUC,aCkDPC,E,kDAjDX,aAAe,IAAD,8BACV,gBASJC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,SAZ5B,EAgBdC,gBAAkB,SAACL,GACfA,EAAMM,iBACNC,QAAQC,IAAI,YAfZ,EAAKC,MAAQ,CACTC,UAAW,GACXC,WAAY,GACZC,aAAc,IANR,E,qDAsBV,OACI,8BACI,6BAASnB,UAAU,wBACf,0BAAMoB,OAAO,UACT,2BAAOC,QAAQ,OAAOrB,UAAU,QAAhC,eACA,2BAAOsB,SAAUC,KAAKjB,aAAckB,KAAK,OAAOd,KAAK,cACrD,2BAAOW,QAAQ,QAAQrB,UAAU,SAAjC,UACA,2BAAOsB,SAAUC,KAAKjB,aAAckB,KAAK,OAAOd,KAAK,aAAae,YAAY,mBAC9E,2BAAOJ,QAAQ,YAAf,iBACA,8BAAUC,SAAUC,KAAKjB,aAAckB,KAAK,OAAOd,KAAK,eAAegB,GAAG,WAAWC,KAAK,IAAIC,KAAK,KAAKC,UAAU,MAAMJ,YAAY,2BACpI,4BAAQK,QAASP,KAAKX,iBAAtB,cAEJ,yBAAKZ,UAAU,WACX,2BAAIuB,KAAKP,MAAMC,WACf,gCAAMM,KAAKP,MAAME,YACjB,+BAAKK,KAAKP,MAAMG,gBAIxB,6BAASnB,UAAU,WACf,kBAAC,EAAD,Y,GA3CDI,aCkBJ2B,EAlBG,WACd,OACI,4BAAQ/B,UAAU,WACd,6BACI,sCAEA,uBAAGgC,KAAK,yBAAyBvB,OAAO,SAASwB,IAAI,uBAArD,mBAFA,UAIA,wCAEI,uBAAGD,KAAK,4BAAR,qBCqBLE,G,6KAhBX,OACE,6BACE,kBAACC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,W,GAdUhC,cCKEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.185d6cfc.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n // Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyByQfh4ZpdiIzPV324W4n9SnIIILLl_v1g\",\n    authDomain: \"onememoryapp-d4ec6.firebaseapp.com\",\n    databaseURL: \"https://onememoryapp-d4ec6.firebaseio.com\",\n    projectId: \"onememoryapp-d4ec6\",\n    storageBucket: \"onememoryapp-d4ec6.appspot.com\",\n    messagingSenderId: \"867043533998\",\n    appId: \"1:867043533998:web:da7f0633e196d1d789793f\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React from 'react';\n\nconst SetHeader = () => {\n    return (\n    <header className=\"wrapper\">\n        <h1>One Memory</h1>\n        <blockquote> “ A moment lasts all of a second, but the memory lives on forever <span role=\"img\"  aria-label=\"sparked start\"> ✨</span> „ </blockquote>\n    </header>\n    );\n}\n\nexport default SetHeader;","import React, { Component } from 'react';\n\nclass Tableau extends Component {\n    render() {\n        return (\n            <h2>Pin Your Entry</h2>\n        );\n    }\n}\nexport default Tableau;","import React, { Component } from 'react';\nimport Tableau from './Tableau';\nclass Main extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            entryDate: \"\",\n            entryTitle: \"\",\n            entryComment: \"\"\n        }\n\n    }\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    setSubmitButton = (event) => {\n        event.preventDefault();\n        console.log('Working')\n    }\n\n    render() {\n        return (\n            <main>\n                <section className=\"firstSection wrapper\">\n                    <form action=\"submit\">\n                        <label htmlFor=\"date\" className=\"date\">Entry Date:</label>\n                        <input onChange={this.handleChange} type=\"date\" name=\"entryDate\" ></input>\n                        <label htmlFor=\"title\" className=\"title\">Title:</label>\n                        <input onChange={this.handleChange} type=\"text\" name=\"entryTitle\" placeholder=\"Trip to France\" />\n                        <label htmlFor=\"newEntry\">Add an Entry:</label>\n                        <textarea onChange={this.handleChange} type=\"text\" name=\"entryComment\" id=\"newEntry\" rows=\"7\" cols=\"45\" maxLength=\"380\" placeholder=\"Type out your Souvenir\" />\n                        <button onClick={this.setSubmitButton}>Log Entry</button>\n                    </form>\n                    <div className=\"preview\">\n                        <p>{this.state.entryDate}</p>\n                        <h2> {this.state.entryTitle}</h2>\n                        <p> {this.state.entryComment}</p>\n                    </div>\n                </section>\n\n                <section className=\"tableau\">\n                    <Tableau />\n                </section>\n            </main>\n        )\n    }\n}\n\nexport default Main;\n","import React from 'react';\n\nconst SetFooter = () => {\n    return (\n        <footer className=\"wrapper\">\n            <div>\n                <p>\n                Built by\n                <a href=\"https://luztherose.com\" target=\"_blank\" rel=\"noopener noreferrer\"> Luz De La Rosa</a>, 2020\n                </p>\n                <p>\n                    Created at \n                    <a href=\"https://junocollege.com/\"> Juno College</a>\n                </p>\n                \n            </div>\n        </footer>\n    )\n}\n\nexport default SetFooter;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     usermemory:[\"It's working!\"]\n  //   }\n  // }\n\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n        <Footer />\n        \n        {/* {\n        this.state.usermemory.map( (memoryEntry) => {\n          return <div>{memoryEntry}</div>\n        })\n      } */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}