{"version":3,"sources":["Header.js","firebase.js","Tableau.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["SetHeader","className","role","aria-label","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Tableau","deleteEntry","entryId","window","confirm","database","ref","child","remove","alert","state","entries","on","snapshot","data","val","newEntries","propName","entry","id","push","setState","this","map","key","onClick","date","title","comment","signature","Component","Main","getPreviewContainerClassName","handleChange","event","target","name","value","handleFormSubmit","preventDefault","action","onSubmit","htmlFor","onChange","type","required","placeholder","autoFocus","rows","cols","maxLength","SetFooter","href","rel","App","Header","Footer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1945ed45.chunk.js","sourcesContent":["import React from 'react';\n\nconst SetHeader = () => {\n    return (\n    <header >\n        <div className=\"wrapper\">\n            <h1>One Memory</h1>\n            <blockquote> “ A moment lasts all of a second, but the memory lives on forever <span role=\"img\"  aria-label=\"sparked start\"> ✨</span> „ </blockquote>\n        </div>\n    </header>\n    );\n}\n\nexport default SetHeader;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n // Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyByQfh4ZpdiIzPV324W4n9SnIIILLl_v1g\",\n    authDomain: \"onememoryapp-d4ec6.firebaseapp.com\",\n    databaseURL: \"https://onememoryapp-d4ec6.firebaseio.com\",\n    projectId: \"onememoryapp-d4ec6\",\n    storageBucket: \"onememoryapp-d4ec6.appspot.com\",\n    messagingSenderId: \"867043533998\",\n    appId: \"1:867043533998:web:da7f0633e196d1d789793f\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase';\nclass Tableau extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            entries: []\n        }\n    }\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n        dbRef.on('value', (snapshot) => {\n            const data = snapshot.val();\n            const newEntries = [];\n\n            for (let propName in data) {\n                const entry = data[propName]\n                entry.id = propName\n\n                newEntries.push(entry);\n            }\n            this.setState({\n                entries: newEntries\n            })\n        })\n    }\n\n    deleteEntry = (entryId) => {\n        if(window.confirm('Are sure you want to delete this entry? ❌ ')){\n            const dbRef = firebase.database().ref();\n            dbRef.child(entryId).remove();\n            alert(\"Deleted ✅\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper entriesSection\">\n                {\n                    this.state.entries.map((entry) => {\n                        return (\n                            <div key={entry.id}>\n                                <button onClick={ () => this.deleteEntry(entry.id) } className=\"removeEntry\">✖</button>\n                                <p> Date: {entry.date}</p>\n                                <h3>{entry.title}</h3>\n                                <p>{entry.comment}</p>\n                                <p>{entry.signature} </p>\n                            </div>\n                        )\n                    })\n                }\n\n            </div >\n        );\n    }\n}\nexport default Tableau;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Tableau from './Tableau';\nclass Main extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            comment: \"\",\n            date: \"\",\n            title: \"\",\n            signature: \"\"\n        }\n    }\n\n    getPreviewContainerClassName = () => {\n        let className = \"\"\n        if(this.state.comment || this.state.date || this.state.title  || this.state.signature) {\n            className = \"preview\"\n        }else{\n            className = \"hidden\"\n        }\n        return className\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n        const dbRef = firebase.database().ref();\n        dbRef.push(this.state);\n\n        this.setState({\n            comment: \"\",\n            date: \"\",\n            title: \"\",\n            signature: \"\"\n        })\n    }\n\n    render() {\n        return (\n            <main>\n            <section className=\"wrapper description\">\n                <p>\n                oneMemory is an app that allows users to share their most treasured souvenirs with the world. Fill out the form, and let your most precious memory live forever in <span className=\"characters\">380</span> characters!\n                </p>\n            </section>\n                <section className=\"formSection wrapper\">\n                    <form action=\"submit\" onSubmit={this.handleFormSubmit}>\n\n                        <label htmlFor=\"date\">Entry Date:</label>\n                        <input onChange={this.handleChange}  value={ this.state.date } type=\"date\" name=\"date\" required /><br/>\n\n                        <label htmlFor=\"title\">Title:</label>\n                        <input onChange={this.handleChange} value={ this.state.title } type=\"text\" name=\"title\" placeholder=\"Trip to France\" required autoFocus /><br/>\n\n                        <label htmlFor=\"sign\">Signature:</label>\n                        <input onChange={this.handleChange}  value={ this.state.signature } type=\"text\" name=\"signature\" required  placeholder=\"John S.\" /><br/>\n\n                        <label htmlFor=\"newEntry\"></label>\n                        <textarea onChange={this.handleChange} value={ this.state.comment } type=\"text\" name=\"comment\" id=\"newEntry\" rows=\"5\" cols=\"40\" maxLength=\"380\" placeholder=\"Type out your Souvenir\" required autoFocus />\n\n                        <button type=\"submit\">Log Entry</button>\n                    </form>\n                    \n                    <div className={this.getPreviewContainerClassName()}>\n                        <h2>Preview</h2>\n                        <div className=\"userEntry\">\n                            <p>{this.state.date}</p>\n                            <h3> {this.state.title}</h3>\n                            <p> {this.state.comment}</p>\n                            <p>{this.state.signature} </p>\n                        </div>\n                    </div>\n                </section>\n\n                <section className=\"tableau  \">\n                    <h2>Pin Your Entry <span className=\"pinImg\" role=\"img\" aria-label=\"pin image\">📌</span></h2>\n                    <Tableau />\n                </section>\n            </main>\n        )\n    }\n}\n\nexport default Main;\n","import React from 'react';\n\nconst SetFooter = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>\n                Built by\n                <a href=\"https://luztherose.com\" target=\"_blank\" rel=\"noopener noreferrer\"> Luz De La Rosa</a>, 2020\n                </p>\n                <p>\n                    Created at \n                    <a href=\"https://junocollege.com/\"> Juno College</a>\n                </p>\n                \n            </div>\n        </footer>\n    )\n}\n\nexport default SetFooter;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}